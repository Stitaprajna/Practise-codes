{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Fake News Classifier","metadata":{"id":"IbNkl3vsoA-b"}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"id":"qRJ2rzfDoLQx","execution":{"iopub.status.busy":"2022-08-07T13:16:33.882172Z","iopub.execute_input":"2022-08-07T13:16:33.882689Z","iopub.status.idle":"2022-08-07T13:16:33.913046Z","shell.execute_reply.started":"2022-08-07T13:16:33.882651Z","shell.execute_reply":"2022-08-07T13:16:33.911919Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"/kaggle/input/fake-news/train.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/fake-news/train.csv')","metadata":{"id":"Jz2bbb1VIEUc","execution":{"iopub.status.busy":"2022-08-07T13:16:36.886234Z","iopub.execute_input":"2022-08-07T13:16:36.886665Z","iopub.status.idle":"2022-08-07T13:16:39.200322Z","shell.execute_reply.started":"2022-08-07T13:16:36.886636Z","shell.execute_reply":"2022-08-07T13:16:39.198886Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"id":"bQDGf4WRIpge","outputId":"dfe5013d-c576-4933-cd38-8a3c93738599","execution":{"iopub.status.busy":"2022-08-07T09:22:05.611040Z","iopub.execute_input":"2022-08-07T09:22:05.611633Z","iopub.status.idle":"2022-08-07T09:22:05.631910Z","shell.execute_reply.started":"2022-08-07T09:22:05.611599Z","shell.execute_reply":"2022-08-07T09:22:05.630845Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   id                                              title              author  \\\n0   0  House Dem Aide: We Didn’t Even See Comey’s Let...       Darrell Lucus   \n1   1  FLYNN: Hillary Clinton, Big Woman on Campus - ...     Daniel J. Flynn   \n2   2                  Why the Truth Might Get You Fired  Consortiumnews.com   \n3   3  15 Civilians Killed In Single US Airstrike Hav...     Jessica Purkiss   \n4   4  Iranian woman jailed for fictional unpublished...      Howard Portnoy   \n\n                                                text  label  \n0  House Dem Aide: We Didn’t Even See Comey’s Let...      1  \n1  Ever get the feeling your life circles the rou...      0  \n2  Why the Truth Might Get You Fired October 29, ...      1  \n3  Videos 15 Civilians Killed In Single US Airstr...      1  \n4  Print \\nAn Iranian woman has been sentenced to...      1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>title</th>\n      <th>author</th>\n      <th>text</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>House Dem Aide: We Didn’t Even See Comey’s Let...</td>\n      <td>Darrell Lucus</td>\n      <td>House Dem Aide: We Didn’t Even See Comey’s Let...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>FLYNN: Hillary Clinton, Big Woman on Campus - ...</td>\n      <td>Daniel J. Flynn</td>\n      <td>Ever get the feeling your life circles the rou...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>Why the Truth Might Get You Fired</td>\n      <td>Consortiumnews.com</td>\n      <td>Why the Truth Might Get You Fired October 29, ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>15 Civilians Killed In Single US Airstrike Hav...</td>\n      <td>Jessica Purkiss</td>\n      <td>Videos 15 Civilians Killed In Single US Airstr...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>Iranian woman jailed for fictional unpublished...</td>\n      <td>Howard Portnoy</td>\n      <td>Print \\nAn Iranian woman has been sentenced to...</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"id":"3GPJ3ay3OE7j","outputId":"8001703d-d521-4b1c-dc9e-5960b9709f30","execution":{"iopub.status.busy":"2022-08-07T09:22:10.991051Z","iopub.execute_input":"2022-08-07T09:22:10.991658Z","iopub.status.idle":"2022-08-07T09:22:11.010832Z","shell.execute_reply.started":"2022-08-07T09:22:10.991624Z","shell.execute_reply":"2022-08-07T09:22:11.009846Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"id           0\ntitle      558\nauthor    1957\ntext        39\nlabel        0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df.groupby('label')['label'].agg('count')","metadata":{"id":"-kJB4dhzHSeo","outputId":"9cf6e77d-5800-46c2-c5c9-ee65a9c95bde","execution":{"iopub.status.busy":"2022-08-07T09:22:14.613026Z","iopub.execute_input":"2022-08-07T09:22:14.613656Z","iopub.status.idle":"2022-08-07T09:22:14.625337Z","shell.execute_reply.started":"2022-08-07T09:22:14.613619Z","shell.execute_reply":"2022-08-07T09:22:14.624135Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"label\n0    10387\n1    10413\nName: label, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"import seaborn as sn\nDF = df.copy()\nreplace = {0:'Real',1:'fake'}\nDF['label'] = DF['label'].replace(replace)\nsn.displot(DF['label'])","metadata":{"id":"aVV8qUIgItDN","outputId":"cfe97eb5-a694-41ad-bfc7-da86a1fd8f8e","execution":{"iopub.status.busy":"2022-08-07T09:22:18.282276Z","iopub.execute_input":"2022-08-07T09:22:18.282919Z","iopub.status.idle":"2022-08-07T09:22:19.201713Z","shell.execute_reply.started":"2022-08-07T09:22:18.282882Z","shell.execute_reply":"2022-08-07T09:22:19.200600Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"<seaborn.axisgrid.FacetGrid at 0x7fa4bbd32e90>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 360x360 with 1 Axes>","image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":"This is definitely not an **imbalanced dataset**, so accuracy metric will be a good measure for evaluation.","metadata":{"id":"LjNVO3hOJ0y6"}},{"cell_type":"markdown","source":"# Using Multinomail Naive-Bayes & Passive-Aggresive Classifier (ML approach)","metadata":{"id":"ar23ayvW8b4y"}},{"cell_type":"code","source":"from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer, HashingVectorizer","metadata":{"id":"yxD8lazpUXwN","execution":{"iopub.status.busy":"2022-08-07T13:16:53.876296Z","iopub.execute_input":"2022-08-07T13:16:53.876703Z","iopub.status.idle":"2022-08-07T13:16:53.883993Z","shell.execute_reply.started":"2022-08-07T13:16:53.876659Z","shell.execute_reply":"2022-08-07T13:16:53.882131Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"import nltk\nimport re","metadata":{"id":"4DY_-JjsUdBD","execution":{"iopub.status.busy":"2022-08-07T13:16:56.910466Z","iopub.execute_input":"2022-08-07T13:16:56.910846Z","iopub.status.idle":"2022-08-07T13:16:56.918818Z","shell.execute_reply.started":"2022-08-07T13:16:56.910815Z","shell.execute_reply":"2022-08-07T13:16:56.917125Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"df.drop('author',axis=1,inplace=True)\ndf = df.dropna()","metadata":{"id":"EqwLOn4WUjN9","execution":{"iopub.status.busy":"2022-08-07T13:17:04.096249Z","iopub.execute_input":"2022-08-07T13:17:04.096620Z","iopub.status.idle":"2022-08-07T13:17:04.124593Z","shell.execute_reply.started":"2022-08-07T13:17:04.096591Z","shell.execute_reply":"2022-08-07T13:17:04.123391Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2022-08-07T13:17:07.371250Z","iopub.execute_input":"2022-08-07T13:17:07.371782Z","iopub.status.idle":"2022-08-07T13:17:07.393853Z","shell.execute_reply.started":"2022-08-07T13:17:07.371751Z","shell.execute_reply":"2022-08-07T13:17:07.392553Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"   id                                              title  \\\n0   0  House Dem Aide: We Didn’t Even See Comey’s Let...   \n1   1  FLYNN: Hillary Clinton, Big Woman on Campus - ...   \n2   2                  Why the Truth Might Get You Fired   \n3   3  15 Civilians Killed In Single US Airstrike Hav...   \n4   4  Iranian woman jailed for fictional unpublished...   \n\n                                                text  label  \n0  House Dem Aide: We Didn’t Even See Comey’s Let...      1  \n1  Ever get the feeling your life circles the rou...      0  \n2  Why the Truth Might Get You Fired October 29, ...      1  \n3  Videos 15 Civilians Killed In Single US Airstr...      1  \n4  Print \\nAn Iranian woman has been sentenced to...      1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>title</th>\n      <th>text</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>House Dem Aide: We Didn’t Even See Comey’s Let...</td>\n      <td>House Dem Aide: We Didn’t Even See Comey’s Let...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>FLYNN: Hillary Clinton, Big Woman on Campus - ...</td>\n      <td>Ever get the feeling your life circles the rou...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>Why the Truth Might Get You Fired</td>\n      <td>Why the Truth Might Get You Fired October 29, ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>15 Civilians Killed In Single US Airstrike Hav...</td>\n      <td>Videos 15 Civilians Killed In Single US Airstr...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>Iranian woman jailed for fictional unpublished...</td>\n      <td>Print \\nAn Iranian woman has been sentenced to...</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.drop(['id'],axis=1,inplace=True)\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2022-08-07T13:17:13.272248Z","iopub.execute_input":"2022-08-07T13:17:13.275367Z","iopub.status.idle":"2022-08-07T13:17:13.290853Z","shell.execute_reply.started":"2022-08-07T13:17:13.275319Z","shell.execute_reply":"2022-08-07T13:17:13.289380Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"                                               title  \\\n0  House Dem Aide: We Didn’t Even See Comey’s Let...   \n1  FLYNN: Hillary Clinton, Big Woman on Campus - ...   \n2                  Why the Truth Might Get You Fired   \n3  15 Civilians Killed In Single US Airstrike Hav...   \n4  Iranian woman jailed for fictional unpublished...   \n\n                                                text  label  \n0  House Dem Aide: We Didn’t Even See Comey’s Let...      1  \n1  Ever get the feeling your life circles the rou...      0  \n2  Why the Truth Might Get You Fired October 29, ...      1  \n3  Videos 15 Civilians Killed In Single US Airstr...      1  \n4  Print \\nAn Iranian woman has been sentenced to...      1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>text</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>House Dem Aide: We Didn’t Even See Comey’s Let...</td>\n      <td>House Dem Aide: We Didn’t Even See Comey’s Let...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>FLYNN: Hillary Clinton, Big Woman on Campus - ...</td>\n      <td>Ever get the feeling your life circles the rou...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Why the Truth Might Get You Fired</td>\n      <td>Why the Truth Might Get You Fired October 29, ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>15 Civilians Killed In Single US Airstrike Hav...</td>\n      <td>Videos 15 Civilians Killed In Single US Airstr...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Iranian woman jailed for fictional unpublished...</td>\n      <td>Print \\nAn Iranian woman has been sentenced to...</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer","metadata":{"id":"YP6UaM3vUqX6","execution":{"iopub.status.busy":"2022-08-07T13:17:17.564013Z","iopub.execute_input":"2022-08-07T13:17:17.564486Z","iopub.status.idle":"2022-08-07T13:17:17.570812Z","shell.execute_reply.started":"2022-08-07T13:17:17.564454Z","shell.execute_reply":"2022-08-07T13:17:17.569532Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"from nltk.stem import WordNetLemmatizer","metadata":{"id":"8jyO-BQjUuNi","execution":{"iopub.status.busy":"2022-08-07T13:17:21.015971Z","iopub.execute_input":"2022-08-07T13:17:21.016955Z","iopub.status.idle":"2022-08-07T13:17:21.023775Z","shell.execute_reply.started":"2022-08-07T13:17:21.016883Z","shell.execute_reply":"2022-08-07T13:17:21.022350Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"lr = WordNetLemmatizer()\nps = PorterStemmer()","metadata":{"id":"5sMW65xEU0zP","execution":{"iopub.status.busy":"2022-08-07T13:17:25.111203Z","iopub.execute_input":"2022-08-07T13:17:25.112684Z","iopub.status.idle":"2022-08-07T13:17:25.120139Z","shell.execute_reply.started":"2022-08-07T13:17:25.112640Z","shell.execute_reply":"2022-08-07T13:17:25.118757Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":"# (i) Using title as feature","metadata":{"id":"kqjzGh2k77wR"}},{"cell_type":"code","source":"'''import nltk\nnltk.download('stopwords')\ncorpus = []\nfor i in range(len(df)):\n    review = re.sub('[^a-zA-Z]', ' ', df['title'][i])\n    review = review.lower()\n    review = review.split()\n    review = [ps.stem(str(word)) for word in review if not word in stopwords.words('english')]\n    review = ' '.join(review)\n    corpus.append(review)'''","metadata":{"id":"6rKDhnlbU_ui","outputId":"084c9462-6491-4b0f-d6e8-198e878b9698","execution":{"iopub.status.busy":"2022-08-07T13:31:49.960564Z","iopub.execute_input":"2022-08-07T13:31:49.961541Z","iopub.status.idle":"2022-08-07T13:31:49.983536Z","shell.execute_reply.started":"2022-08-07T13:31:49.961420Z","shell.execute_reply":"2022-08-07T13:31:49.982559Z"},"trusted":true},"execution_count":1,"outputs":[{"execution_count":1,"output_type":"execute_result","data":{"text/plain":"\"import nltk\\nnltk.download('stopwords')\\ncorpus = []\\nfor i in range(len(df)):\\n    review = re.sub('[^a-zA-Z]', ' ', df['title'][i])\\n    review = review.lower()\\n    review = review.split()\\n    review = [ps.stem(str(word)) for word in review if not word in stopwords.words('english')]\\n    review = ' '.join(review)\\n    corpus.append(review)\""},"metadata":{}}]},{"cell_type":"code","source":"cv = CountVectorizer(max_features=5000,ngram_range=(1,3))\nX = cv.fit_transform(corpus).toarray()","metadata":{"id":"l_IOQUm8WjiN","execution":{"iopub.status.busy":"2022-08-07T11:11:54.994868Z","iopub.execute_input":"2022-08-07T11:11:54.995231Z","iopub.status.idle":"2022-08-07T11:11:55.007057Z","shell.execute_reply.started":"2022-08-07T11:11:54.995201Z","shell.execute_reply":"2022-08-07T11:11:55.005748Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"code","source":"'''from sklearn.model_selection import train_test_split\ny = df.label'''","metadata":{"id":"X2U-mpsSWv4N","execution":{"iopub.status.busy":"2022-08-07T11:11:59.130806Z","iopub.execute_input":"2022-08-07T11:11:59.131769Z","iopub.status.idle":"2022-08-07T11:11:59.137163Z","shell.execute_reply.started":"2022-08-07T11:11:59.131733Z","shell.execute_reply":"2022-08-07T11:11:59.135809Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"'''x_train,x_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=0)'''","metadata":{"id":"O-y17umWWxYH","execution":{"iopub.status.busy":"2022-08-07T11:12:12.967762Z","iopub.execute_input":"2022-08-07T11:12:12.968230Z","iopub.status.idle":"2022-08-07T11:12:13.014298Z","shell.execute_reply.started":"2022-08-07T11:12:12.968185Z","shell.execute_reply":"2022-08-07T11:12:13.011856Z"},"trusted":true},"execution_count":37,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_1026/2264420323.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtest_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/sklearn/model_selection/_split.py\u001b[0m in \u001b[0;36mtrain_test_split\u001b[0;34m(test_size, train_size, random_state, shuffle, stratify, *arrays)\u001b[0m\n\u001b[1;32m   2415\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"At least one array required as input\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2416\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2417\u001b[0;31m     \u001b[0marrays\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2418\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2419\u001b[0m     \u001b[0mn_samples\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_num_samples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mindexable\u001b[0;34m(*iterables)\u001b[0m\n\u001b[1;32m    376\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    377\u001b[0m     \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0m_make_indexable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mX\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miterables\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 378\u001b[0;31m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    379\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    380\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_consistent_length\u001b[0;34m(*arrays)\u001b[0m\n\u001b[1;32m    332\u001b[0m         raise ValueError(\n\u001b[1;32m    333\u001b[0m             \u001b[0;34m\"Found input variables with inconsistent numbers of samples: %r\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 334\u001b[0;31m             \u001b[0;34m%\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0ml\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlengths\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    335\u001b[0m         )\n\u001b[1;32m    336\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Found input variables with inconsistent numbers of samples: [53, 20203]"],"ename":"ValueError","evalue":"Found input variables with inconsistent numbers of samples: [53, 20203]","output_type":"error"}]},{"cell_type":"code","source":"'''from sklearn.naive_bayes import MultinomialNB\nnaive_bayes = MultinomialNB()\nmodel = naive_bayes.fit(x_train,y_train)'''","metadata":{"id":"9wEawu7lW1Xj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''from sklearn import metrics\ny_pred = model.predict(x_test)\ncm = metrics.confusion_matrix(y_test,y_pred)\nimport matplotlib.pyplot as plt\nimport seaborn as sn'''","metadata":{"id":"2w_jfwzvXbG_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''print('Model: Multinomial Naive-Bayes')\nprint('Accuracy:',model.score(x_test,y_test))\nprint('Precision:',precision_score(y_test,y_pred))\nprint('AUC:',roc_auc_score(y_test,y_pred ))\nsn.heatmap(cm,annot=True,fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.show()'''","metadata":{"id":"xeT0jRQzX2G2","outputId":"aae57928-bdb1-448b-f61a-a8fc4869de9a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''# PassiveAgressiveClassifier\nfrom sklearn.linear_model import PassiveAggressiveClassifier\nPassive_Aggressive_model = PassiveAggressiveClassifier()\nmodel12 = Passive_Aggressive_model.fit(x_train,y_train)\ny_pred_PAC = model12.predict(x_test)\nCM = metrics.confusion_matrix(y_test, y_pred_PAC)'''","metadata":{"id":"YuF3JjT-X8Dz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''print('Model: Passive-Agressive Classifier')\nprint('Accuracy:',model12.score(x_test,y_test))\nprint('Precision:',precision_score(y_test,y_pred))\nprint('AUC:',roc_auc_score(y_test,y_pred))\nsn.heatmap(CM,annot=True,fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.show()'''","metadata":{"id":"uClZwkAMYeGi","outputId":"0bd1715d-54d5-4b5d-8740-74e1bbd205b6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# (ii) Using text as a feature instead of title","metadata":{"id":"ZRXBG70bYshP"}},{"cell_type":"code","source":"'''corpus1 = []\nfor i in range(len(df)):\n    review = re.sub('[^a-zA-Z]', ' ', df['text'][i])\n    review = review.lower()\n    review = review.split()\n    review = [ps.stem(str(word)) for word in review if not word in stopwords.words('english')]\n    review = ' '.join(review)\n    corpus1.append(review)'''","metadata":{"id":"SZ6YRixjYwX1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''corpus1'''","metadata":{"id":"8Pu-4Q0NgtXe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''cv1 = TfidfVectorizer(max_features=5000,ngram_range=(1,3))'''","metadata":{"id":"CqVb5Atqg3lV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''x = cv1.fit_transform(corpus1).toarray()'''","metadata":{"id":"zUWMMpOaiAyC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''X_train,X_test,Y_train,Y_test = train_test_split(x,y,test_size=0.3,random_state=0)'''","metadata":{"id":"Uq48zc2njK1-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''NB = MultinomialNB()\nmodel2= NB.fit(X_train,Y_train)'''","metadata":{"id":"mWXJWkkkj2je"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''model2.score(X_test,Y_test)'''","metadata":{"id":"siT2qk8Dlzk6","outputId":"47219ea7-7540-4066-88e1-2db4142f926f"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''Y_pred = model2.predict(X_test)\ncm = metrics.confusion_matrix(Y_test,Y_pred)'''","metadata":{"id":"Egpcvv0ZnBP-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''print('Model: Multinomial Naive-Bayes Classifier')\nprint('Accuracy:',model2.score(X_test,Y_test))\nsn.heatmap(cm,annot=True,fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.show()'''","metadata":{"id":"ePNEkUkk0rXS","outputId":"652d5b8d-1f1d-4f58-8fba-7f37b89ef959"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''# PassiveAgressiveClassifier\nPassive_Aggressive_model = PassiveAggressiveClassifier()\nmodel22 = Passive_Aggressive_model.fit(X_train,Y_train)\nY_preD = model22.predict(X_test)\nCM1 = metrics.confusion_matrix(Y_test, Y_preD)'''","metadata":{"id":"TWEuwa3e2V94"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''print('Model: Passive-Agressive Classfier')\nprint('Accuracy:',model22.score(X_test,Y_test))\nsn.heatmap(CM1,annot=True,fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.show()'''","metadata":{"id":"q8XJDA3e-aw6","outputId":"172cfd33-3af5-47a6-d9f3-e6e2b36b987e"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Using LSTM & Bi-Directional Neural Networks (Deep Learning)","metadata":{"id":"zeN1W_hRlB36"}},{"cell_type":"code","source":"y_f = df.label","metadata":{"id":"vxI7IGBmnxcU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_f.shape","metadata":{"id":"S_5po9ESunk4","outputId":"43bf3676-ea02-4a81-b428-e94a318bbfa3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras.layers import Embedding, LSTM, Dense\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.text import one_hot","metadata":{"id":"C81B4lRUuqEE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#(i) Using title for training the model","metadata":{"id":"sF4wNKxcJD0r"}},{"cell_type":"code","source":"voc_size=5000","metadata":{"id":"3_MRogXZzEAR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#one_hot_rep = [one_hot(words,voc_size) for words in corpus] ","metadata":{"id":"pNXpgS1V0Dq8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"one_hot_rep","metadata":{"id":"sCwc6GoC6W4-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''sent_length = 20\nembedded_docs = pad_sequences(one_hot_rep, padding = 'pre', maxlen=sent_length)'''","metadata":{"id":"geOBenxK6uSb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#embedded_docs","metadata":{"id":"r_NFwd48-apX","outputId":"07e2f681-740e-44cc-c51b-5ecebcefdb82"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"embedding_vec_features = 40","metadata":{"id":"CKcLX-ph-ozR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# LSTM\nmodel = Sequential()\nmodel.add(Embedding(voc_size,embedding_vec_features,input_length=sent_length))\nmodel.add(LSTM(100))\nmodel.add(Dense(1, activation='tanh'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam',metrics=['accuracy'])","metadata":{"id":"_VsUehq_EAr3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.summary()","metadata":{"id":"ugzAg67qKbfk","outputId":"c6510dc0-d72d-403e-eae1-2a83b4d426ba"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''import numpy as np\nx_final = np.array(embedded_docs)\ny_final = np.array(y_f)'''","metadata":{"id":"wquMcxm9Kfmi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''xf_train,xf_test,yf_train,yf_test = train_test_split(x_final,y_final,test_size=0.3,random_state=0)'''","metadata":{"id":"96-xgw9UM_ra"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''model.fit(xf_train,yf_train,validation_data=(xf_test,yf_test),epochs=10,batch_size=64)'''","metadata":{"id":"EvlcarKvOGk3","outputId":"8ae686ce-ecf5-4dca-e587-59626a69d805"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Using an **Activation function** as **'tanh'** will give all values in the range **[-1,1]**. So, we have to set a thersold of **0**, thus values greater than **0** will be classified as **1** and vice versa. ","metadata":{"id":"uJOBVijY_n11"}},{"cell_type":"code","source":"'''yf_pred = model.predict(xf_test)\nclasses_x=np.where(yf_pred > 0, 1,0)'''","metadata":{"id":"R7vzHcxxPDrf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Using LSTM:","metadata":{"id":"rvZTQRkxJZPz"}},{"cell_type":"code","source":"'''print('Model: LSTM')\nprint('Accuracy:', metrics.accuracy_score(yf_test,classes_x))\nCm = metrics.confusion_matrix(yf_test,classes_x)\nsn.heatmap(Cm,annot=True,fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.title('Confusion Matrix for LSTM')\nplt.show()'''","metadata":{"id":"E9tO07j8Pp8C","outputId":"f4c03892-cf97-447c-a3bd-4f027d98b8ff"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras.layers import Bidirectional, Dropout","metadata":{"id":"tv5MWmO74URR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Bidirectional LSTM\n'''model1 = Sequential()\nmodel1.add(Embedding(voc_size,embedding_vec_features,input_length=sent_length))\nmodel1.add(Bidirectional(LSTM(100)))\nmodel1.add(Dropout(0.3))\nmodel1.add(Dense(1, activation='tanh'))\nmodel1.compile(loss='binary_crossentropy', optimizer='adam',metrics=['accuracy'])'''","metadata":{"id":"WFMUQtI44V5L"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model1.summary()","metadata":{"id":"AkFDHP934jtV","outputId":"d0ef733c-9177-42af-c0bd-5a65ec030ef1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''model1.fit(xf_train,yf_train,validation_data=(xf_test,yf_test),epochs=10,batch_size=64 )'''","metadata":{"id":"w40NRF9JFPJD","outputId":"8a576769-6a17-4f5f-dde4-c7cecaac784b"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''Y_pred = model.predict(xf_test)\nclasses_X = np.where(y_pred>0,1,0)'''","metadata":{"id":"e6e8eVCKIEN5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Using Bi-directional LSTM:","metadata":{"id":"eexfOWaMJklc"}},{"cell_type":"code","source":"'''print('Model: Bidirectional LSTM')\nprint('Accuracy:', metrics.accuracy_score(yf_test,classes_X))\nCm = metrics.confusion_matrix(yf_test,classes_x)\nsn.heatmap(Cm,annot=True,fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.title('Confusion Matrix of Bi-directional LSTM')\nplt.show()'''","metadata":{"id":"-tytVlfgH4o0","outputId":"99d45d77-dea4-48a3-907d-a3599b6e2fb0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#Using text for training-testing the model","metadata":{"id":"VpS0AFOQJ8fs"}},{"cell_type":"code","source":"'''one_hot_R = [one_hot(word,150000) for word in corpus1]'''","metadata":{"id":"S5QUHBzbIvCw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''one_hot_R'''","metadata":{"id":"lTU3_SR1K5Fj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#corpus1","metadata":{"id":"pdDfqz-4M7Tq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#len(max(corpus1, key=len))","metadata":{"id":"MA3dCkrgM87a","outputId":"362176f6-fd68-46a9-8756-c76294702e78"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#len(max(corpus,key=len))","metadata":{"id":"PRFgUs1cO1sF","outputId":"df66c469-2223-40b4-d696-fddd3f475167"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''sent_length1 = 4820\nembedded_doc = pad_sequences(one_hot_R, padding = 'pre', maxlen=sent_length1)'''","metadata":{"id":"8Sc-1ephPrWX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''embedded_doc'''","metadata":{"id":"XqxH2fZPR8-1","outputId":"eeebe123-b29f-4224-e07a-7e24f9f5bb96"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''X_final = np.array(embedded_doc)\nY_final = np.array(y_f)'''","metadata":{"id":"u6Ycme3QQLFu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''Xf_train,Xf_test,Yf_train,Yf_test = train_test_split(X_final,Y_final,test_size=0.3,random_state=0)'''","metadata":{"id":"wM1YoRXjSSS9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# LSTM\n'''embedding_vec_features = 9640\nmodel21 = Sequential()\nmodel21.add(Embedding(voc_size,embedding_vec_features,input_length=sent_length1))\nmodel21.add(LSTM(500))\nmodel21.add(Dense(1, activation='tanh'))\nmodel21.compile(loss='binary_crossentropy', optimizer='adam',metrics=['accuracy'])'''","metadata":{"id":"r2w0qMrmSmDG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"'''model21.fit(Xf_train,Yf_train,validation_data=(Xf_test,Yf_test),epochs=10,batch_size=64)'''","metadata":{"id":"PKirVboUS32z","outputId":"21226c66-ab29-474f-e6dc-074159040636"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt \nsns.histplot(df.label)\nplt.show()","metadata":{"id":"qerLBaTDTm_G","outputId":"c776aeea-417f-4d0b-824b-e9ac42a4510d"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install tensorflow-gpu","metadata":{"id":"XCfGTp-YTwCU","outputId":"c0883e56-9213-4247-b180-3c82ae881b78","execution":{"iopub.status.busy":"2022-08-07T09:23:11.943211Z","iopub.execute_input":"2022-08-07T09:23:11.943615Z","iopub.status.idle":"2022-08-07T09:23:21.736192Z","shell.execute_reply.started":"2022-08-07T09:23:11.943581Z","shell.execute_reply":"2022-08-07T09:23:21.734969Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Requirement already satisfied: tensorflow-gpu in /opt/conda/lib/python3.7/site-packages (2.9.1)\nRequirement already satisfied: setuptools in /opt/conda/lib/python3.7/site-packages (from tensorflow-gpu) (59.8.0)\nRequirement already satisfied: google-pasta>=0.1.1 in /opt/conda/lib/python3.7/site-packages (from tensorflow-gpu) (0.2.0)\nRequirement already satisfied: wrapt>=1.11.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow-gpu) (1.14.1)\nRequirement already satisfied: keras-preprocessing>=1.1.1 in /opt/conda/lib/python3.7/site-packages (from tensorflow-gpu) (1.1.2)\nRequirement already satisfied: protobuf<3.20,>=3.9.2 in /opt/conda/lib/python3.7/site-packages (from tensorflow-gpu) (3.19.4)\nRequirement already satisfied: tensorflow-estimator<2.10.0,>=2.9.0rc0 in /opt/conda/lib/python3.7/site-packages (from tensorflow-gpu) (2.9.0)\nRequirement already satisfied: h5py>=2.9.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow-gpu) (3.7.0)\nRequirement already satisfied: gast<=0.4.0,>=0.2.1 in /opt/conda/lib/python3.7/site-packages (from tensorflow-gpu) (0.4.0)\nRequirement already satisfied: keras<2.10.0,>=2.9.0rc0 in /opt/conda/lib/python3.7/site-packages (from tensorflow-gpu) (2.9.0)\nRequirement already satisfied: tensorboard<2.10,>=2.9 in /opt/conda/lib/python3.7/site-packages (from tensorflow-gpu) (2.9.1)\nRequirement already satisfied: packaging in /opt/conda/lib/python3.7/site-packages (from tensorflow-gpu) (21.3)\nRequirement already satisfied: flatbuffers<2,>=1.12 in /opt/conda/lib/python3.7/site-packages (from tensorflow-gpu) (1.12)\nRequirement already satisfied: absl-py>=1.0.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow-gpu) (1.1.0)\nRequirement already satisfied: grpcio<2.0,>=1.24.3 in /opt/conda/lib/python3.7/site-packages (from tensorflow-gpu) (1.43.0)\nRequirement already satisfied: termcolor>=1.1.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow-gpu) (1.1.0)\nRequirement already satisfied: numpy>=1.20 in /opt/conda/lib/python3.7/site-packages (from tensorflow-gpu) (1.21.6)\nRequirement already satisfied: astunparse>=1.6.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow-gpu) (1.6.3)\nRequirement already satisfied: six>=1.12.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow-gpu) (1.16.0)\nRequirement already satisfied: opt-einsum>=2.3.2 in /opt/conda/lib/python3.7/site-packages (from tensorflow-gpu) (3.3.0)\nRequirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /opt/conda/lib/python3.7/site-packages (from tensorflow-gpu) (0.26.0)\nRequirement already satisfied: typing-extensions>=3.6.6 in /opt/conda/lib/python3.7/site-packages (from tensorflow-gpu) (4.1.1)\nRequirement already satisfied: libclang>=13.0.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow-gpu) (14.0.6)\nRequirement already satisfied: wheel<1.0,>=0.23.0 in /opt/conda/lib/python3.7/site-packages (from astunparse>=1.6.0->tensorflow-gpu) (0.37.1)\nRequirement already satisfied: werkzeug>=1.0.1 in /opt/conda/lib/python3.7/site-packages (from tensorboard<2.10,>=2.9->tensorflow-gpu) (2.1.2)\nRequirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.7/site-packages (from tensorboard<2.10,>=2.9->tensorflow-gpu) (2.28.1)\nRequirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /opt/conda/lib/python3.7/site-packages (from tensorboard<2.10,>=2.9->tensorflow-gpu) (1.8.1)\nRequirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /opt/conda/lib/python3.7/site-packages (from tensorboard<2.10,>=2.9->tensorflow-gpu) (0.6.1)\nRequirement already satisfied: google-auth<3,>=1.6.3 in /opt/conda/lib/python3.7/site-packages (from tensorboard<2.10,>=2.9->tensorflow-gpu) (1.35.0)\nRequirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.7/site-packages (from tensorboard<2.10,>=2.9->tensorflow-gpu) (3.3.7)\nRequirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /opt/conda/lib/python3.7/site-packages (from tensorboard<2.10,>=2.9->tensorflow-gpu) (0.4.6)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.7/site-packages (from packaging->tensorflow-gpu) (3.0.9)\nRequirement already satisfied: rsa<5,>=3.1.4 in /opt/conda/lib/python3.7/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow-gpu) (4.8)\nRequirement already satisfied: pyasn1-modules>=0.2.1 in /opt/conda/lib/python3.7/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow-gpu) (0.2.7)\nRequirement already satisfied: cachetools<5.0,>=2.0.0 in /opt/conda/lib/python3.7/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow-gpu) (4.2.4)\nRequirement already satisfied: requests-oauthlib>=0.7.0 in /opt/conda/lib/python3.7/site-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.10,>=2.9->tensorflow-gpu) (1.3.1)\nRequirement already satisfied: importlib-metadata>=4.4 in /opt/conda/lib/python3.7/site-packages (from markdown>=2.6.8->tensorboard<2.10,>=2.9->tensorflow-gpu) (4.12.0)\nRequirement already satisfied: charset-normalizer<3,>=2 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow-gpu) (2.1.0)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow-gpu) (2022.6.15)\nRequirement already satisfied: urllib3<1.27,>=1.21.1 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow-gpu) (1.26.9)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow-gpu) (3.3)\nRequirement already satisfied: zipp>=0.5 in /opt/conda/lib/python3.7/site-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<2.10,>=2.9->tensorflow-gpu) (3.8.0)\nRequirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /opt/conda/lib/python3.7/site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow-gpu) (0.4.8)\nRequirement already satisfied: oauthlib>=3.0.0 in /opt/conda/lib/python3.7/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.10,>=2.9->tensorflow-gpu) (3.2.0)\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m","output_type":"stream"}]},{"cell_type":"code","source":"!nvidia-smi","metadata":{"id":"nHGFN8EUU2wS","outputId":"487f5824-5f19-467b-86a7-1bd59aa5f953","execution":{"iopub.status.busy":"2022-08-07T09:25:46.461911Z","iopub.execute_input":"2022-08-07T09:25:46.462942Z","iopub.status.idle":"2022-08-07T09:25:47.695781Z","shell.execute_reply.started":"2022-08-07T09:25:46.462901Z","shell.execute_reply":"2022-08-07T09:25:47.694510Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"Sun Aug  7 09:25:47 2022       \n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 470.82.01    Driver Version: 470.82.01    CUDA Version: 11.4     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  Tesla P100-PCIE...  Off  | 00000000:00:04.0 Off |                    0 |\n| N/A   36C    P0    28W / 250W |      0MiB / 16280MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n                                                                               \n+-----------------------------------------------------------------------------+\n| Processes:                                                                  |\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n|        ID   ID                                                   Usage      |\n|=============================================================================|\n|  No running processes found                                                 |\n+-----------------------------------------------------------------------------+\n","output_type":"stream"}]},{"cell_type":"code","source":"!pip install tensorflow_hub \n!pip install tensorflow_text","metadata":{"id":"huwliZL3VxtB","outputId":"62de13c7-3613-41b7-9142-577eba62e357","execution":{"iopub.status.busy":"2022-08-07T09:25:56.362138Z","iopub.execute_input":"2022-08-07T09:25:56.362917Z","iopub.status.idle":"2022-08-07T09:26:16.247100Z","shell.execute_reply.started":"2022-08-07T09:25:56.362880Z","shell.execute_reply":"2022-08-07T09:26:16.245839Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"Requirement already satisfied: tensorflow_hub in /opt/conda/lib/python3.7/site-packages (0.12.0)\nRequirement already satisfied: protobuf>=3.8.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow_hub) (3.19.4)\nRequirement already satisfied: numpy>=1.12.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow_hub) (1.21.6)\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0mRequirement already satisfied: tensorflow_text in /opt/conda/lib/python3.7/site-packages (2.9.0)\nRequirement already satisfied: tensorflow<2.10,>=2.9.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow_text) (2.9.1)\nRequirement already satisfied: tensorflow-hub>=0.8.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow_text) (0.12.0)\nRequirement already satisfied: keras<2.10.0,>=2.9.0rc0 in /opt/conda/lib/python3.7/site-packages (from tensorflow<2.10,>=2.9.0->tensorflow_text) (2.9.0)\nRequirement already satisfied: absl-py>=1.0.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow<2.10,>=2.9.0->tensorflow_text) (1.1.0)\nRequirement already satisfied: grpcio<2.0,>=1.24.3 in /opt/conda/lib/python3.7/site-packages (from tensorflow<2.10,>=2.9.0->tensorflow_text) (1.43.0)\nRequirement already satisfied: h5py>=2.9.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow<2.10,>=2.9.0->tensorflow_text) (3.7.0)\nRequirement already satisfied: tensorflow-estimator<2.10.0,>=2.9.0rc0 in /opt/conda/lib/python3.7/site-packages (from tensorflow<2.10,>=2.9.0->tensorflow_text) (2.9.0)\nRequirement already satisfied: flatbuffers<2,>=1.12 in /opt/conda/lib/python3.7/site-packages (from tensorflow<2.10,>=2.9.0->tensorflow_text) (1.12)\nRequirement already satisfied: astunparse>=1.6.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow<2.10,>=2.9.0->tensorflow_text) (1.6.3)\nRequirement already satisfied: six>=1.12.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow<2.10,>=2.9.0->tensorflow_text) (1.16.0)\nRequirement already satisfied: protobuf<3.20,>=3.9.2 in /opt/conda/lib/python3.7/site-packages (from tensorflow<2.10,>=2.9.0->tensorflow_text) (3.19.4)\nRequirement already satisfied: typing-extensions>=3.6.6 in /opt/conda/lib/python3.7/site-packages (from tensorflow<2.10,>=2.9.0->tensorflow_text) (4.1.1)\nRequirement already satisfied: tensorboard<2.10,>=2.9 in /opt/conda/lib/python3.7/site-packages (from tensorflow<2.10,>=2.9.0->tensorflow_text) (2.9.1)\nRequirement already satisfied: setuptools in /opt/conda/lib/python3.7/site-packages (from tensorflow<2.10,>=2.9.0->tensorflow_text) (59.8.0)\nRequirement already satisfied: opt-einsum>=2.3.2 in /opt/conda/lib/python3.7/site-packages (from tensorflow<2.10,>=2.9.0->tensorflow_text) (3.3.0)\nRequirement already satisfied: google-pasta>=0.1.1 in /opt/conda/lib/python3.7/site-packages (from tensorflow<2.10,>=2.9.0->tensorflow_text) (0.2.0)\nRequirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /opt/conda/lib/python3.7/site-packages (from tensorflow<2.10,>=2.9.0->tensorflow_text) (0.26.0)\nRequirement already satisfied: wrapt>=1.11.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow<2.10,>=2.9.0->tensorflow_text) (1.14.1)\nRequirement already satisfied: numpy>=1.20 in /opt/conda/lib/python3.7/site-packages (from tensorflow<2.10,>=2.9.0->tensorflow_text) (1.21.6)\nRequirement already satisfied: packaging in /opt/conda/lib/python3.7/site-packages (from tensorflow<2.10,>=2.9.0->tensorflow_text) (21.3)\nRequirement already satisfied: libclang>=13.0.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow<2.10,>=2.9.0->tensorflow_text) (14.0.6)\nRequirement already satisfied: keras-preprocessing>=1.1.1 in /opt/conda/lib/python3.7/site-packages (from tensorflow<2.10,>=2.9.0->tensorflow_text) (1.1.2)\nRequirement already satisfied: termcolor>=1.1.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow<2.10,>=2.9.0->tensorflow_text) (1.1.0)\nRequirement already satisfied: gast<=0.4.0,>=0.2.1 in /opt/conda/lib/python3.7/site-packages (from tensorflow<2.10,>=2.9.0->tensorflow_text) (0.4.0)\nRequirement already satisfied: wheel<1.0,>=0.23.0 in /opt/conda/lib/python3.7/site-packages (from astunparse>=1.6.0->tensorflow<2.10,>=2.9.0->tensorflow_text) (0.37.1)\nRequirement already satisfied: werkzeug>=1.0.1 in /opt/conda/lib/python3.7/site-packages (from tensorboard<2.10,>=2.9->tensorflow<2.10,>=2.9.0->tensorflow_text) (2.1.2)\nRequirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /opt/conda/lib/python3.7/site-packages (from tensorboard<2.10,>=2.9->tensorflow<2.10,>=2.9.0->tensorflow_text) (0.6.1)\nRequirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.7/site-packages (from tensorboard<2.10,>=2.9->tensorflow<2.10,>=2.9.0->tensorflow_text) (2.28.1)\nRequirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.7/site-packages (from tensorboard<2.10,>=2.9->tensorflow<2.10,>=2.9.0->tensorflow_text) (3.3.7)\nRequirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /opt/conda/lib/python3.7/site-packages (from tensorboard<2.10,>=2.9->tensorflow<2.10,>=2.9.0->tensorflow_text) (1.8.1)\nRequirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /opt/conda/lib/python3.7/site-packages (from tensorboard<2.10,>=2.9->tensorflow<2.10,>=2.9.0->tensorflow_text) (0.4.6)\nRequirement already satisfied: google-auth<3,>=1.6.3 in /opt/conda/lib/python3.7/site-packages (from tensorboard<2.10,>=2.9->tensorflow<2.10,>=2.9.0->tensorflow_text) (1.35.0)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.7/site-packages (from packaging->tensorflow<2.10,>=2.9.0->tensorflow_text) (3.0.9)\nRequirement already satisfied: rsa<5,>=3.1.4 in /opt/conda/lib/python3.7/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow<2.10,>=2.9.0->tensorflow_text) (4.8)\nRequirement already satisfied: pyasn1-modules>=0.2.1 in /opt/conda/lib/python3.7/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow<2.10,>=2.9.0->tensorflow_text) (0.2.7)\nRequirement already satisfied: cachetools<5.0,>=2.0.0 in /opt/conda/lib/python3.7/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow<2.10,>=2.9.0->tensorflow_text) (4.2.4)\nRequirement already satisfied: requests-oauthlib>=0.7.0 in /opt/conda/lib/python3.7/site-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.10,>=2.9->tensorflow<2.10,>=2.9.0->tensorflow_text) (1.3.1)\nRequirement already satisfied: importlib-metadata>=4.4 in /opt/conda/lib/python3.7/site-packages (from markdown>=2.6.8->tensorboard<2.10,>=2.9->tensorflow<2.10,>=2.9.0->tensorflow_text) (4.12.0)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow<2.10,>=2.9.0->tensorflow_text) (2022.6.15)\nRequirement already satisfied: urllib3<1.27,>=1.21.1 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow<2.10,>=2.9.0->tensorflow_text) (1.26.9)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow<2.10,>=2.9.0->tensorflow_text) (3.3)\nRequirement already satisfied: charset-normalizer<3,>=2 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow<2.10,>=2.9.0->tensorflow_text) (2.1.0)\nRequirement already satisfied: zipp>=0.5 in /opt/conda/lib/python3.7/site-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<2.10,>=2.9->tensorflow<2.10,>=2.9.0->tensorflow_text) (3.8.0)\nRequirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /opt/conda/lib/python3.7/site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow<2.10,>=2.9.0->tensorflow_text) (0.4.8)\nRequirement already satisfied: oauthlib>=3.0.0 in /opt/conda/lib/python3.7/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.10,>=2.9->tensorflow<2.10,>=2.9.0->tensorflow_text) (3.2.0)\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m","output_type":"stream"}]},{"cell_type":"code","source":"x11 = df.drop(['label'],axis=1)\ny11 = df['label']\nfrom sklearn.model_selection import train_test_split\nx1_train,x1_test, y1_train, y1_test = train_test_split(x11['text'],y11, test_size=0.3)","metadata":{"id":"cFjadI4ZT4zk","execution":{"iopub.status.busy":"2022-08-07T09:26:16.348824Z","iopub.execute_input":"2022-08-07T09:26:16.349499Z","iopub.status.idle":"2022-08-07T09:26:16.362389Z","shell.execute_reply.started":"2022-08-07T09:26:16.349456Z","shell.execute_reply":"2022-08-07T09:26:16.361400Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"import tensorflow_hub as hub\nimport tensorflow_text as text \npre = hub.KerasLayer('https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3')\nmodel = hub.KerasLayer('https://tfhub.dev/tensorflow/bert_en_uncased_L-12_H-768_A-12/4')\nprint('.....')","metadata":{"id":"WQvAcSy6UBAp","outputId":"76673187-df89-4408-cac3-f7123e401b8a","execution":{"iopub.status.busy":"2022-08-07T09:26:16.364783Z","iopub.execute_input":"2022-08-07T09:26:16.365653Z","iopub.status.idle":"2022-08-07T09:26:32.675871Z","shell.execute_reply.started":"2022-08-07T09:26:16.365565Z","shell.execute_reply":"2022-08-07T09:26:32.674032Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":".....\n","output_type":"stream"}]},{"cell_type":"code","source":"y1_test.value_counts()","metadata":{"execution":{"iopub.status.busy":"2022-08-07T11:10:17.076945Z","iopub.execute_input":"2022-08-07T11:10:17.077489Z","iopub.status.idle":"2022-08-07T11:10:17.091812Z","shell.execute_reply.started":"2022-08-07T11:10:17.077454Z","shell.execute_reply":"2022-08-07T11:10:17.090555Z"},"trusted":true},"execution_count":27,"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"0    3118\n1    2943\nName: label, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"import tensorflow_hub as hub\ndef bert_embeding(sentence):\n    prey = pre(sentence)\n    return model(prey)['pooled_output']","metadata":{"id":"qMsMFQCGUFbp","execution":{"iopub.status.busy":"2022-08-07T09:26:38.341364Z","iopub.execute_input":"2022-08-07T09:26:38.341750Z","iopub.status.idle":"2022-08-07T09:26:38.347135Z","shell.execute_reply.started":"2022-08-07T09:26:38.341717Z","shell.execute_reply":"2022-08-07T09:26:38.346064Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\ntf_input = tf.keras.layers.Input(shape=(), dtype = tf.string, name ='input')\npre_text = pre(tf_input)\noutput = model(pre_text)\n\nl1 = tf.keras.layers.Dropout(0.1)(output['pooled_output'])\nl2 = tf.keras.layers.Dense(150, activation='relu',name='hidden')(l1)\nl3 = tf.keras.layers.Dense(50, activation='relu',name='hidden1')(l2)\nl4 = tf.keras.layers.Dense(1, activation='sigmoid', name='output')(l3)\n\nmodel = tf.keras.Model(inputs=[tf_input], outputs = [l4])","metadata":{"id":"xyjZh7qMUMe_","execution":{"iopub.status.busy":"2022-08-07T09:26:40.602016Z","iopub.execute_input":"2022-08-07T09:26:40.603115Z","iopub.status.idle":"2022-08-07T09:26:41.300144Z","shell.execute_reply.started":"2022-08-07T09:26:40.603041Z","shell.execute_reply":"2022-08-07T09:26:41.299142Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"model.summary()","metadata":{"execution":{"iopub.status.busy":"2022-08-07T09:26:46.621265Z","iopub.execute_input":"2022-08-07T09:26:46.621631Z","iopub.status.idle":"2022-08-07T09:26:46.663678Z","shell.execute_reply.started":"2022-08-07T09:26:46.621599Z","shell.execute_reply":"2022-08-07T09:26:46.662874Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"Model: \"model\"\n__________________________________________________________________________________________________\n Layer (type)                   Output Shape         Param #     Connected to                     \n==================================================================================================\n input (InputLayer)             [(None,)]            0           []                               \n                                                                                                  \n keras_layer (KerasLayer)       {'input_mask': (Non  0           ['input[0][0]']                  \n                                e, 128),                                                          \n                                 'input_type_ids':                                                \n                                (None, 128),                                                      \n                                 'input_word_ids':                                                \n                                (None, 128)}                                                      \n                                                                                                  \n keras_layer_1 (KerasLayer)     {'default': (None,   109482241   ['keras_layer[0][0]',            \n                                768),                             'keras_layer[0][1]',            \n                                 'pooled_output': (               'keras_layer[0][2]']            \n                                None, 768),                                                       \n                                 'sequence_output':                                               \n                                 (None, 128, 768),                                                \n                                 'encoder_outputs':                                               \n                                 [(None, 128, 768),                                               \n                                 (None, 128, 768),                                                \n                                 (None, 128, 768),                                                \n                                 (None, 128, 768),                                                \n                                 (None, 128, 768),                                                \n                                 (None, 128, 768),                                                \n                                 (None, 128, 768),                                                \n                                 (None, 128, 768),                                                \n                                 (None, 128, 768),                                                \n                                 (None, 128, 768),                                                \n                                 (None, 128, 768),                                                \n                                 (None, 128, 768)]}                                               \n                                                                                                  \n dropout (Dropout)              (None, 768)          0           ['keras_layer_1[0][13]']         \n                                                                                                  \n hidden (Dense)                 (None, 150)          115350      ['dropout[0][0]']                \n                                                                                                  \n hidden1 (Dense)                (None, 50)           7550        ['hidden[0][0]']                 \n                                                                                                  \n output (Dense)                 (None, 1)            51          ['hidden1[0][0]']                \n                                                                                                  \n==================================================================================================\nTotal params: 109,605,192\nTrainable params: 122,951\nNon-trainable params: 109,482,241\n__________________________________________________________________________________________________\n","output_type":"stream"}]},{"cell_type":"code","source":"METRICS = [\n      tf.keras.metrics.BinaryAccuracy(name='accuracy'),\n      tf.keras.metrics.Precision(name='precision'),\n      tf.keras.metrics.Recall(name='recall')\n]\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n#model.to('cuda')","metadata":{"id":"_WBuwjWiUTiF","outputId":"6dd6d0bf-81f6-4412-eb8f-8af5e68c8e05","execution":{"iopub.status.busy":"2022-08-07T09:26:53.064191Z","iopub.execute_input":"2022-08-07T09:26:53.066866Z","iopub.status.idle":"2022-08-07T09:26:53.099131Z","shell.execute_reply.started":"2022-08-07T09:26:53.066823Z","shell.execute_reply":"2022-08-07T09:26:53.098178Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"import tensorflow_text as text\nimport numpy as np\nmodel.fit((x1_train),y1_train, epochs=50)","metadata":{"id":"o0xPcTmIUXXQ","outputId":"c621e2b8-a2ba-4ecf-9ab9-35d76ac21141","execution":{"iopub.status.busy":"2022-08-07T09:27:02.601770Z","iopub.execute_input":"2022-08-07T09:27:02.602433Z","iopub.status.idle":"2022-08-07T11:05:23.771785Z","shell.execute_reply.started":"2022-08-07T09:27:02.602396Z","shell.execute_reply":"2022-08-07T11:05:23.770846Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"Epoch 1/50\n442/442 [==============================] - 127s 268ms/step - loss: 0.4869 - accuracy: 0.7616\nEpoch 2/50\n442/442 [==============================] - 118s 267ms/step - loss: 0.3778 - accuracy: 0.8336\nEpoch 3/50\n442/442 [==============================] - 118s 267ms/step - loss: 0.3577 - accuracy: 0.8384\nEpoch 4/50\n442/442 [==============================] - 118s 268ms/step - loss: 0.3453 - accuracy: 0.8500\nEpoch 5/50\n442/442 [==============================] - 118s 268ms/step - loss: 0.3380 - accuracy: 0.8527\nEpoch 6/50\n442/442 [==============================] - 118s 268ms/step - loss: 0.3378 - accuracy: 0.8545\nEpoch 7/50\n442/442 [==============================] - 119s 268ms/step - loss: 0.3310 - accuracy: 0.8582\nEpoch 8/50\n442/442 [==============================] - 118s 267ms/step - loss: 0.3321 - accuracy: 0.8586\nEpoch 9/50\n442/442 [==============================] - 118s 267ms/step - loss: 0.3278 - accuracy: 0.8580\nEpoch 10/50\n442/442 [==============================] - 118s 267ms/step - loss: 0.3342 - accuracy: 0.8550\nEpoch 11/50\n442/442 [==============================] - 118s 266ms/step - loss: 0.3222 - accuracy: 0.8612\nEpoch 12/50\n442/442 [==============================] - 118s 267ms/step - loss: 0.3237 - accuracy: 0.8617\nEpoch 13/50\n442/442 [==============================] - 118s 267ms/step - loss: 0.3165 - accuracy: 0.8651\nEpoch 14/50\n442/442 [==============================] - 118s 267ms/step - loss: 0.3165 - accuracy: 0.8626\nEpoch 15/50\n442/442 [==============================] - 117s 265ms/step - loss: 0.3116 - accuracy: 0.8644\nEpoch 16/50\n442/442 [==============================] - 118s 267ms/step - loss: 0.3111 - accuracy: 0.8654\nEpoch 17/50\n442/442 [==============================] - 118s 267ms/step - loss: 0.3114 - accuracy: 0.8655\nEpoch 18/50\n442/442 [==============================] - 118s 267ms/step - loss: 0.3080 - accuracy: 0.8678\nEpoch 19/50\n442/442 [==============================] - 118s 267ms/step - loss: 0.3061 - accuracy: 0.8685\nEpoch 20/50\n442/442 [==============================] - 118s 266ms/step - loss: 0.2967 - accuracy: 0.8733\nEpoch 21/50\n442/442 [==============================] - 117s 265ms/step - loss: 0.3000 - accuracy: 0.8712\nEpoch 22/50\n442/442 [==============================] - 116s 263ms/step - loss: 0.3036 - accuracy: 0.8699\nEpoch 23/50\n442/442 [==============================] - 117s 265ms/step - loss: 0.2919 - accuracy: 0.8731\nEpoch 24/50\n442/442 [==============================] - 118s 266ms/step - loss: 0.2955 - accuracy: 0.8723\nEpoch 25/50\n442/442 [==============================] - 118s 266ms/step - loss: 0.2909 - accuracy: 0.8726\nEpoch 26/50\n442/442 [==============================] - 117s 264ms/step - loss: 0.2924 - accuracy: 0.8751\nEpoch 27/50\n442/442 [==============================] - 117s 264ms/step - loss: 0.2858 - accuracy: 0.8771\nEpoch 28/50\n442/442 [==============================] - 118s 266ms/step - loss: 0.2905 - accuracy: 0.8767\nEpoch 29/50\n442/442 [==============================] - 117s 265ms/step - loss: 0.2798 - accuracy: 0.8794\nEpoch 30/50\n442/442 [==============================] - 118s 266ms/step - loss: 0.2876 - accuracy: 0.8764\nEpoch 31/50\n442/442 [==============================] - 118s 268ms/step - loss: 0.2837 - accuracy: 0.8803\nEpoch 32/50\n442/442 [==============================] - 118s 267ms/step - loss: 0.2761 - accuracy: 0.8823\nEpoch 33/50\n442/442 [==============================] - 118s 267ms/step - loss: 0.2775 - accuracy: 0.8804\nEpoch 34/50\n442/442 [==============================] - 117s 265ms/step - loss: 0.2739 - accuracy: 0.8828\nEpoch 35/50\n442/442 [==============================] - 118s 267ms/step - loss: 0.2687 - accuracy: 0.8866\nEpoch 36/50\n442/442 [==============================] - 118s 268ms/step - loss: 0.2714 - accuracy: 0.8847\nEpoch 37/50\n442/442 [==============================] - 120s 272ms/step - loss: 0.2710 - accuracy: 0.8862\nEpoch 38/50\n442/442 [==============================] - 118s 266ms/step - loss: 0.2722 - accuracy: 0.8834\nEpoch 39/50\n442/442 [==============================] - 118s 266ms/step - loss: 0.2704 - accuracy: 0.8845\nEpoch 40/50\n442/442 [==============================] - 118s 267ms/step - loss: 0.2638 - accuracy: 0.8862\nEpoch 41/50\n442/442 [==============================] - 117s 266ms/step - loss: 0.2653 - accuracy: 0.8838\nEpoch 42/50\n442/442 [==============================] - 117s 266ms/step - loss: 0.2647 - accuracy: 0.8871\nEpoch 43/50\n442/442 [==============================] - 118s 266ms/step - loss: 0.2592 - accuracy: 0.8900\nEpoch 44/50\n442/442 [==============================] - 118s 267ms/step - loss: 0.2631 - accuracy: 0.8866\nEpoch 45/50\n442/442 [==============================] - 119s 268ms/step - loss: 0.2662 - accuracy: 0.8847\nEpoch 46/50\n442/442 [==============================] - 118s 266ms/step - loss: 0.2617 - accuracy: 0.8890\nEpoch 47/50\n442/442 [==============================] - 117s 266ms/step - loss: 0.2564 - accuracy: 0.8908\nEpoch 48/50\n442/442 [==============================] - 118s 267ms/step - loss: 0.2570 - accuracy: 0.8931\nEpoch 49/50\n442/442 [==============================] - 118s 266ms/step - loss: 0.2577 - accuracy: 0.8913\nEpoch 50/50\n442/442 [==============================] - 118s 266ms/step - loss: 0.2518 - accuracy: 0.8925\n","output_type":"stream"},{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"<keras.callbacks.History at 0x7fa42cc5be10>"},"metadata":{}}]},{"cell_type":"code","source":"model.evaluate(x1_test,y1_test)","metadata":{"id":"MUGKUu2tUbBx","outputId":"c3bd51b3-3dd2-45ab-dfdc-ab5c5fbf25a2","execution":{"iopub.status.busy":"2022-08-07T11:05:43.065550Z","iopub.execute_input":"2022-08-07T11:05:43.066539Z","iopub.status.idle":"2022-08-07T11:06:33.670821Z","shell.execute_reply.started":"2022-08-07T11:05:43.066501Z","shell.execute_reply":"2022-08-07T11:06:33.669922Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"190/190 [==============================] - 51s 266ms/step - loss: 0.2344 - accuracy: 0.9020\n","output_type":"stream"},{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"[0.234425351023674, 0.901996374130249]"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix\ny_predict = model.predict(x1_test)","metadata":{"id":"-gZfGtSIUlBQ","outputId":"170761f2-9668-4a57-eb7c-c5321e13d6b4","execution":{"iopub.status.busy":"2022-08-07T11:06:41.010546Z","iopub.execute_input":"2022-08-07T11:06:41.010928Z","iopub.status.idle":"2022-08-07T11:08:03.768158Z","shell.execute_reply.started":"2022-08-07T11:06:41.010897Z","shell.execute_reply":"2022-08-07T11:08:03.767162Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stdout","text":"190/190 [==============================] - 51s 265ms/step\n","output_type":"stream"}]},{"cell_type":"code","source":"y_prn = []\nfor i in y_predict:\n    if i>0.5:\n        y_prn.append(1)  \n    else:\n        y_prn.append(0)\nfrom sklearn.metrics import classification_report,accuracy_score,roc_auc_score,precision_score, confusion_matrix,recall_score\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nprint('Model: Neural Networks')\nprint('Accuracy: 0.8943')\nprint('Precision:',precision_score(y1_test,y_prn))\nprint('AUC:',roc_auc_score(y1_test,y_prn ))\ncmm = confusion_matrix(y1_test,y_prn)\nsns.heatmap(cmm, annot=True, fmt='d')\nplt.show()","metadata":{"id":"OtffOHQT2ayo","outputId":"fe595d42-a91b-4ba1-c955-bf2c519bb9d0","execution":{"iopub.status.busy":"2022-08-07T11:09:25.240631Z","iopub.execute_input":"2022-08-07T11:09:25.241442Z","iopub.status.idle":"2022-08-07T11:09:25.480441Z","shell.execute_reply.started":"2022-08-07T11:09:25.241410Z","shell.execute_reply":"2022-08-07T11:09:25.479499Z"},"trusted":true},"execution_count":26,"outputs":[{"name":"stdout","text":"Model: Neural Networks\nAccuracy: 0.8943\nPrecision: 0.9160467587672688\nAUC: 0.9013424729906714\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 2 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"y1_test.value_counts()","metadata":{"id":"TTUeSRUt32Mk","outputId":"6fafba3a-32e3-4ba8-e985-e5bb96501b9e","execution":{"iopub.status.busy":"2022-08-07T11:18:11.632539Z","iopub.execute_input":"2022-08-07T11:18:11.633046Z","iopub.status.idle":"2022-08-07T11:18:11.641891Z","shell.execute_reply.started":"2022-08-07T11:18:11.633012Z","shell.execute_reply":"2022-08-07T11:18:11.640828Z"},"trusted":true},"execution_count":38,"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"0    3118\n1    2943\nName: label, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"import pickle\nFake_news_classifier = open('Fake_news_classifier.pkl','wb')\npickle.dump(model,Fake_news_classifier)\nFake_news_classifier.close()","metadata":{"id":"XpTkL9uh36cq","execution":{"iopub.status.busy":"2022-08-07T11:25:52.654855Z","iopub.execute_input":"2022-08-07T11:25:52.655510Z","iopub.status.idle":"2022-08-07T11:26:57.702003Z","shell.execute_reply.started":"2022-08-07T11:25:52.655470Z","shell.execute_reply":"2022-08-07T11:26:57.700826Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"code","source":"'''import os\nos.chdir(r'/kaggle/working')\nfrom IPython.display import FileLink\nFileLink(r'Fake_news_classifier.pkl')'''","metadata":{"execution":{"iopub.status.busy":"2022-08-07T11:43:48.586149Z","iopub.execute_input":"2022-08-07T11:43:48.586996Z","iopub.status.idle":"2022-08-07T11:43:48.596904Z","shell.execute_reply.started":"2022-08-07T11:43:48.586957Z","shell.execute_reply":"2022-08-07T11:43:48.595740Z"},"trusted":true},"execution_count":44,"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"/kaggle/working/Fake_news_classifier.pkl","text/html":"<a href='Fake_news_classifier.pkl' target='_blank'>Fake_news_classifier.pkl</a><br>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}